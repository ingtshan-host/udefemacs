;;; init-org.el -*- lexical-binding: t; -*-

;;; Commentary:

;; my org

;;; Code:

;; org-basic

(leaf org
  :require indent-guide
  :hook((org-mode-hook . org-indent-mode)
        (org-mode-hook . indent-guide-mode)
        (org-mode-hook
         .
         (lambda ()
           (visual-line-mode)
           (make-local-variable 'word-wrap)
           (setq word-wrap nil)
           )))

  :bind((org-mode-map
         ("H-k" . ns/org-kill-link-at-point))
        (org-mode-map
         ("H-j c" . bujo/check-task))
        (org-mode-map
         ("H-j t" . bujo/set-current-task-state)))
  :config
  (leaf org-contrib)
  ;; when opening a org file, don't collapse headings
  (setq org-startup-folded nil)

  ;; wrap long lines. don't let it disappear to the right
  ;; (setq org-startup-truncated t)
  ;; when in a url link, enter key should open it
  (setq org-return-follows-link t)

  ;; make org-mode‚Äù syntax color embedded source code
  (setq org-src-fontify-natively t)

  ;; how the source code edit buffer is displayed
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-agenda-window-setup 'current-window)

  ;; no blank line between insert heading
  ;; The default value is '((heading . auto) (plain-list-item . auto)),
  (setf org-blank-before-new-entry
        '((heading . nil) (plain-list-item . nil)))

  ;; better latex preview
  (setq org-preview-latex-default-process 'dvisvgm)
  
  ;; (setq org-directory "~/iCloud/org/")
  ;; (setq org-agenda-files '("~/iCloud/org/"))

  ;; better refile
  (setq org-refile-targets '((nil :maxlevel . 9)))

  ); end of leaf

(leaf org-appear
  :straight (org-appear :type git :host github :repo "ingtshan/org-appear"))

;; function of org

(defun ns/org-kill-link-at-point ()
  (interactive)
  (when (eq major-mode 'org-mode)
    (let* ((context (org-element-context))
           (type (org-element-type context))
           (beg (org-element-property :begin context))
           (end (org-element-property :end context)))
      (when (eq type 'link)
        (kill-region beg end)))))

(defun ns/open-inline-link ()
  "Follow the next link on the same line"
  (interactive)

  (condition-case nil
      (org-open-at-point)
    (error
     (save-excursion
       (let ((b (line-beginning-position))
             (e (line-end-position)))
         (org-next-link)
         (cond ((< (point) e)
                (org-open-at-point))
               (t (org-next-link t)
                  (if (< b (point))
                      (org-open-at-point)
                    (message "no link on current line")))))))))

(defun ns/org-insert-src-block-with-enter-edit (src-code-type)
  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
  (interactive
   (let ((src-code-types
	      '("emacs-lisp" "rust" "python" "C" "shell" "java" "js" "clojure" "C++" "css"
	        "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
	        "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
	        "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
	        "scheme" "sqlite" "html" "text")))
     (list (ido-completing-read "Source code type: " src-code-types))))
  (save-excursion
    (newline-and-indent)
    (insert (format "#+begin_src %s\n" src-code-type))
    (newline-and-indent)
    (insert "#+end_src\n")
    (previous-line 2)
    (org-edit-src-code)))

(defun ns/org-insert-src-block ()
  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
  (let* ((src-code-types
	      '("emacs-lisp"
            "rust"
            "python"
            "C"
            "shell"
            "java"
            "js"
            "clojure"
            "C++"
            "css"
	        "calc"
            "asymptote"
            "dot"
            "gnuplot"
            "ledger"
            "lilypond"
            "mscgen"
	        "octave"
            "oz"
            "plantuml"
            "R"
            "sass"
            "screen"
            "sql"
            "awk"
            "ditaa"
	        "haskell"
            "latex"
            "matlab"
            "ocaml"
            "org"
            "perl"
            "ruby"
	        "scheme"
            "sqlite"
            "html"))
         (src-code-type
          (completing-read
           "Source code type: " src-code-types)))
    src-code-type))

;; (leaf org-persist
;;   :ensure nil
;;   :straight nil
;;   :custom
;;   ((org-persist-directory
;;     . `,(expand-file-name "var/org-persist/" user-emacs-directory))))

;; org src code block
(leaf org-src
  :ensure nil
  :straight nil

  :hook((org-indent-mode
         . (lambda()
             (diminish 'org-indent-mode)
             ;; WORKAROUND: Prevent text moving around while using brackets
             ;; @see https://github.com/seagle0128/.emacs.d/issues/88
             (make-variable-buffer-local 'show-paren-mode)
             (setq show-paren-mode nil))))
  ;; :custom (
  ;;          (org-src-fontify-natively . t)
  ;;          (org-src-tab-acts-natively . t)
  ;;          (org-edit-src-content-indentation  . 0)
  ;;          )
  )

(leaf org-latex-impatient
  :straight (org-latex-impatient
             :type git :host github 
             :repo "ingtshan/org-latex-impatient")
  ;; :hook ((org-mode-hook . org-latex-impatient-mode))
  :init
  (setq org-latex-impatient-tex2svg-bin
        ;; location of tex2svg executable
        "~/node_modules/mathjax-node-cli/bin/tex2svg"))

(leaf org-fragtog
  :hook (org-mode-hook
         . (lambda ()
             (if org-startup-with-latex-preview
                 (org-fragtog-mode 1))))
  :config)

(leaf separate-inline
  :ensure nil
  :straight (separate-inline
             :type git :host github
             :repo "ingtshan/separate-inline.el"
             :branch "devel")
  :hook ((org-mode-hook . separate-inline-mode)
         (org-mode-hook
          .
          (lambda ()
            (add-hook 'separate-inline-mode-hook
                      'separate-inline-use-default-rules-for-org-local
                      nil 'make-it-local)))))

;; image preview
(leaf org-yt
  :straight (org-yt :type git :host github
                    :repo "TobiasZawada/org-yt")
  :require t)

(with-eval-after-load 'org

  (defun org-image-link (protocol link _description)
    "Interpret LINK as base64-encoded image data."
    (cl-assert (string-match "\\`img" protocol) nil
               "Expected protocol type starting with img")
    (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
      (cl-assert buf nil
                 "Download of image \"%s\" failed." link)
      (with-current-buffer buf
        (goto-char (point-min))
        (re-search-forward "\r?\n\r?\n")
        (buffer-substring-no-properties (point) (point-max)))))

  (org-link-set-parameters
   "imghttp"
   :image-data-fun #'org-image-link)

  (org-link-set-parameters
   "imghttps"
   :image-data-fun #'org-image-link))

(leaf org-anki
  :straight(org-anki
            :type git :host github
            :repo "eyeinsky/org-anki"
            :fork (:branch "devel"))
  :config
  (defun org-anki/bounds-of-current-elem ()
    "Return the bounds of org elem currently surrounding the cursor.
If there is none, return nil."
    (interactive)
    (let*
        ;; Element surrounding the cursor
        ((elem (org-element-context))
         ;; Type of element surrounding the cursor
         (elem-type (nth 0 elem))
         ;; List of fragment's properties
         (elem-plist (nth 1 elem))
         ;; A LaTeX fragment or environment is surrounding the cursor
         (elem-is-latex (and (member elem-type '(latex-fragment latex-environment))
                             ;; Normally org-mode considers whitespace after an
                             ;; element as part of the element.
                             ;; Avoid this behavior and consider trailing
                             ;; whitespace as outside the fragment.
                             (< (point) (- (plist-get elem-plist :end)
                                           (plist-get elem-plist :post-blank))))))
      (unless elem-is-latex
        ;; more org elem
        (org-appear-toggle)
        (setq elem (org-appear--current-elem)))
      (if (or elem-is-latex elem)
          (cons (org-element-property :begin elem)
                (org-element-property :end elem))
        nil)))
  
  (eval-after-load 'org-anki
    '(defun org-anki--is-cloze (text)
       "Check if TEXT has cloze syntax, return nil if not."
       ;; Check for something similar to {{c1::Hidden-text::Hint}} in TEXT
       (if (string-match "{{c[0-9]+::" text)
           "Cloze"
         nil)))
  
  (eval-after-load 'org-anki
    '(defun org-anki--region-to-cloze (begin end arg hint)
       "Cloze region from BEGIN to END with number ARG."
       (let ((region (buffer-substring begin end)))
         (save-excursion
           (delete-region begin end)
           (insert (with-output-to-string
                     (princ (format "{{c%d:: %s " (or arg 1) region))
                     (unless (string-blank-p hint) (princ (format "::%s" hint)))
                     (princ "}}")))))))
  
  (eval-after-load 'org-anki
    '(defun org-anki-cloze-dwim (&optional arg hint)
       "Convert current active region or word under cursor to Cloze
syntax."
       (interactive "P")
       
       (unless hint         
         (sis-global-respect-mode -1)
         (sis-set-other)
         (unwind-protect
             (setq hint (read-string "Hint (Optional) : ..."))
           (sis-set-english)
           (sis-global-respect-mode 1))
         
         (or (string-blank-p hint) (setq hint (concat "..." hint))))
       
       (if (region-active-p)
           (org-anki--region-to-cloze
            (region-beginning) (region-end) arg hint)
         (let ((bounds (org-anki/bounds-of-current-elem)))
           
           (or bounds
               (and (thing-at-point 'word)
                    (setq bounds (bounds-of-thing-at-point 'word))))
           
           (if bounds
               (org-anki--region-to-cloze (car bounds) (cdr bounds) arg hint)
             (error "Nothing to create cloze from"))
           ))))
  )

;; ÈÄâ‰∏≠ ÊèíÂÖ•Ê†∑Âºè ** == // __ ++ ~~ emphasize mark
(defun ns/org-region-to-emphasiz(begin end mark)
  (let ((select-text (buffer-substring begin end)))
    (save-excursion
      (delete-region begin end)
      (insert (concat mark select-text mark)))))

(defun ns/org-emphasize-dwim (&optional mark)
  (interactive (list (completing-read "emphasize: " '("*" "=" "~" "/" "_" "+"))))
  (cond
   ((region-active-p)
    (ns/org-region-to-emphasiz
     (region-beginning) (region-end) mark))
   ((thing-at-point 'word)
    (let ((bounds (bounds-of-thing-at-point 'word)))
      (ns/org-region-to-emphasiz
       (car bounds) (cdr bounds) mark)))
   (t (error "Nothing to emphasiz from"))))

(defun ns/org-cycle()
  "better cycle logic"
  (interactive)
  (let ((head (org-babel-where-is-src-block-head)))
    (cond
     (head (goto-char head))
     ((not (org-at-heading-p)) (org-back-to-heading)))
    (org-cycle)))

;; Yjgo Â≠¶‰π†ËßÇ Êñ≠Â¢®ÂØªÂæÑ
;; Á≠ñÁï•ÔºöËÆ∞ÂøÜ ÁêÜËß£

;; ÁêÜËß£ =Ê≥õÂåñÂ≠¶‰π†

;; ÊòéÁ°ÆÂØπË±°(Êåá‰ª§„ÄÅÂÆö‰πâ„ÄÅÂÆû‰æã„ÄÅËæìÂÖ•„ÄÅËæìÂá∫)
;; Êåá‰ª§ =Áü•ËØÜÂêçÂ≠ó
;; ÂÆö‰πâ =Êåá‰ª§ÁöÑÊñáÂ≠óÊÄßÊèèËø∞
;; ÂÆû‰æã =(ËæìÂÖ•,ËæìÂá∫) ËæìÂÖ•->ÁêÜËß£Ê®°Âûã->ËæìÂá∫

;; ‰∏ÄÈò∂Áü•ËØÜ =ÂàÜÁ±ªÊ®°Âûã„ÄÅÂõûÂΩíÊ®°Âûã
;; ‰∫åÈò∂Áü•ËØÜ =ÂàÜËÄåÊ≤ª‰πã(ÊãÜÂàÜÁü•ËØÜ) =ÁªÑÂêàÂÖ≥Á≥ª„ÄÅÊâßË°åÊ≠•È™§

;; Â≠¶‰π†‰ªªÂä° =ÊûÑÂª∫‰∏ÄÈò∂Áü•ËØÜÔºåÊûÑÂª∫‰∫åÈò∂Áü•ËØÜ
;; ÊûÑÂª∫‰∏ÄÈò∂Áü•ËØÜ =ÂàÜÁ±ª‰ªªÂä°ÔºåÂõûÂΩí‰ªªÂä°
;; ÂàÜÁ±ª‰ªªÂä° =ÂÆÉÊòØ‰ªÄ‰πà(Âà§Êñ≠ÊòØÂíå‰∏çÊòØ)Ôºå‰∏∫‰ªÄ‰πàÊòØ(ÁªìÊûÑ,ÁâπÁÇπÁ≠â)
;; ÂõûÂΩí‰ªªÂä° =ÂÆÉÁöÑÁõÆÁöÑ(‰ΩúÁî®,ÂΩ±Âìç)ÔºåÂ¶Ç‰ΩïËææÊàê(ËØ¶ÁªÜËøáÁ®ã)
;; ÁªÑÂêàÂÖ≥Á≥ª =Áà∂Áü•ËØÜ ‚Äã=Â≠êÁü•ËØÜ+‚ÄãÂ≠êÁü•ËØÜ
;; ÊâßË°åÊ≠•È™§ =Áà∂Áü•ËØÜ =1.Â≠êÁü•ËØÜ 2.Â≠êÁü•ËØÜ

;; ËÆ≠ÁªÉ =‰∏ÄÈò∂ËÆ≠ÁªÉ„ÄÅ‰∫åÈò∂ËÆ≠ÁªÉ„ÄÅÂÆû‰æãÊúâÊïàËÆ≠ÁªÉ„ÄÅÂΩíÁ∫≥ËÆ≠ÁªÉ(‰∫å‰æãÂØπÊØî)
;; È™åËØÅ =Âêå‰πâËΩ¨Êç¢Êåá‰ª§ÂíåÂÆö‰πâ„ÄÅË¥πÊõºÊäÄÂ∑ß

;; ‰∏ÄÈò∂ÂàÜÁ±ªËÆ≠ÁªÉ =ÊòØ‰ªÄ‰πà (Âà§Êñ≠ ÊòØÊàñ‰∏çÊòØ)Ôºå‰∏∫‰ªÄ‰πà (ÁªôÂá∫ÂÖ∑‰ΩìÁêÜÁî±)
;; ‰∏ÄÈò∂ÂõûÂΩíËÆ≠ÁªÉ =Êúâ‰ªÄ‰πàÁî®Ôºå‰∏∫‰∫Ü‰ªÄ‰πàÔºåËØ¶ÁªÜËøáÁ®ã
;; ‰∫åÈò∂ÁªÑÂêà‰ªªÂä° =ÁªÑÊàêÈÉ®ÂàÜ(Ê¶ÇÂøµÂåñÔºåÂ∞ΩÈáè‰∏çÂ±ïÂºÄ)ÔºåÊ≠£ÂêëÂíåÈÄÜÂêë
;; ‰∫åÈò∂Ê≠•È™§ÊãÜÂàÜ =ÊâßË°åÈ°∫Â∫è(Ê¶ÇÂøµÂåñÔºåÂ∞ΩÈáè‰∏çÂ±ïÂºÄ)ÔºåÊ≠£ÂêëÂíåÈÄÜÂêë
;; ÂÆû‰æãËÆ≠ÁªÉ =ÊòéÁ°ÆËæìÂÖ•Ê±ÇËæìÂá∫ ÊØîÂØπÊ†áÂáÜÔºåËá™ÊàëÂèçÈ¶à
;; ÂΩíÁ∫≥ËÆ≠ÁªÉ =ÂØπÊØîÂÆû‰æãËá™ÊàëÊÄªÁªì

;; Âêå‰πâËΩ¨Êç¢ =Ëá™Â∑±ÁöÑËØùË°®Ëø∞ ÂÆö‰πâ
;; Ë¥πÊõºÊäÄÂ∑ß =ÁõÆÁöÑÂØºÂêë(Ëá¥Áî®Êñ∞ÊÉÖÂÜµ)„ÄÅ‰ª•Êïô‰øÉÂ≠¶

(defun ns/study-in-right-way-insert ()
  "Êñ≠Â¢®ÂØªÂæÑ ÊàëÁöÑÂ≠¶‰π†ÂÖ≥ÈîÆËØç"
  (interactive)
  (let ((arg (car (split-string
                   (completing-read
                    "Â≠¶‰π†ÂÖÉÁ¥†"
                    '(" ËÆ∞ÂøÜ"
                      " ÂàÜÊûê =ÈÄªËæëËøáÁ®ã"
                      " ÁêÜËß£ =Ê≥õÂåñÂ≠¶‰π†"
                      "ÊòéÁ°ÆÂØπË±° =Êåá‰ª§„ÄÅÂÆö‰πâ„ÄÅÂÆû‰æã„ÄÅËæìÂÖ•„ÄÅËæìÂá∫"
                      " ËÆ≠ÁªÉ =‰∏ÄÈò∂ËÆ≠ÁªÉ„ÄÅ‰∫åÈò∂ËÆ≠ÁªÉ„ÄÅÂÆû‰æãÊúâÊïàËÆ≠ÁªÉ„ÄÅÂΩíÁ∫≥ËÆ≠ÁªÉ(‰∫å‰æãÂØπÊØî)"
                      " È™åËØÅ =Âêå‰πâËΩ¨Êç¢Êåá‰ª§ÂíåÂÆö‰πâ„ÄÅË¥πÊõºÊäÄÂ∑ß"))))))
    (pcase arg
      ("ËÆ∞ÂøÜ" (setq arg " ËÆ∞ÂøÜ:"))
      ("ÁêÜËß£" (setq arg " ÁêÜËß£:"))
      ("ÂàÜÊûê" (setq arg " ÂàÜÊûê:"))      
      ("ÊòéÁ°ÆÂØπË±°"
       (setq arg
             (concat
              (completing-read
               "ÊòéÁ°ÆÂØπË±°" '("Êåá‰ª§" "ÂÆö‰πâ" "ÂÆû‰æã" "ÈóÆÈ¢ò" "Á≠îÊ°à"))
              ": ")))
      ("ËÆ≠ÁªÉ"
       (call-interactively
        'org-insert-heading-respect-content)
       (setq arg
             (car
              (split-string
               (completing-read
                "ËÆ≠ÁªÉ‰ªªÂä°"
                '("Âà§Êñ≠ÊòØÊàñËÄÖ‰∏çÊòØ,ÂÜçÊèèËø∞ÂéüÂõ† =ÊòØ‰ªÄ‰πà„ÄÅ‰∏∫‰ªÄ‰πà ‰∏ÄÈò∂ÂàÜÁ±ªÁü•ËØÜ"
                  "Êúâ‰ªÄ‰πàÁî® =‰∏ÄÈò∂ÂõûÂΩíÁü•ËØÜ"
                  "ÁâπÁÇπÂíåÂéüÂõ† =‰∏ÄÈò∂ÂõûÂΩíÁü•ËØÜ"
                  "ËØ¶ÁªÜËøáÁ®ã =‰∏ÄÈò∂ÂõûÂΩíÁü•ËØÜ"
                  "Êèê‰æõ‰ªÄ‰πà(Ê¶ÇÂøµÂåñÔºåÂêë‰∏äÈìæ) =‰∫åÈò∂ÁªÑÂêàÁü•ËØÜ"
                  "ÁªÑÊàêÈÉ®ÂàÜ(Ê¶ÇÂøµÂåñÔºåÂ∞ΩÈáè‰∏çÂ±ïÂºÄÔºåÊ≠£ÂêëÂíåÈÄÜÂêë) =‰∫åÈò∂ÁªÑÂêàÁü•ËØÜ"
                  "ÊãÜÂàÜÊ≠•È™§(Ê¶ÇÂøµÂåñÔºåÂ∞ΩÈáè‰∏çÂ±ïÂºÄÔºåÊ≠£ÂêëÂíåÈÄÜÂêë) =‰∫åÁ∫ßÊ≠•È™§ÊãÜÂàÜ"
                  "ÂÆû‰æãËÆ≠ÁªÉ(ËæìÂÖ•->ËæìÂá∫) =ÊòéÁ°ÆËæìÂÖ•Ê±ÇËæìÂá∫ ÊØîÂØπÊ†áÂáÜÔºåËá™ÊàëÂèçÈ¶à"
                  "ÂΩíÁ∫≥ËÆ≠ÁªÉ(ÂΩíÁ∫≥ÔºåÊÄªÁªì) =ÂØπÊØîÂÆû‰æãËá™ÊàëÊÄªÁªì"
                  ))))))
      ("È™åËØÅ"
       (setq arg
             (car
              (split-string
               (completing-read
                "ËÆ≠ÁªÉ‰ªªÂä°"
                '("Áî®Ëá™Â∑±ËØùËß£ÈáäÂÆö‰πâÔºåÊØîÂñªÊåá‰ª§ =Âêå‰πâËΩ¨Êç¢"
                  "Â≠¶‰ª•Ëá¥Áî®,ÁõÆÁöÑÂØºÂêëÂ≠¶‰π† =Ë¥πÊõºÊäÄÂ∑ß"
                  "‰ª•Êïô‰øÉÂ≠¶ =Ë¥πÊõºÊäÄÂ∑ß"
                  )))))))
    (pcase arg
      ("Âà§Êñ≠ÊòØÊàñËÄÖ‰∏çÊòØ,ÂÜçÊèèËø∞ÂéüÂõ†"
       (insert "‰∏ÄÈò∂ËÆ≠ÁªÉÔºöÂà§Êñ≠ÊòØ‰∏çÊòØ\n")
       (save-excursion
         (call-interactively 'org-insert-subheading)
         (insert "Á≠îÊ°à\n")
         (call-interactively 'org-insert-subheading)
         (insert "‰∏ÄÈò∂ËÆ≠ÁªÉÔºö‰∏∫‰ªÄ‰πà\n")
         (insert "Á≠îÊ°à:")
         (call-interactively
          'org-insert-heading-respect-content)
         (insert "‰∏ÄÈò∂ËÆ≠ÁªÉ: ‰∏æÂÖ∂‰ªñ‰æãÂ≠ê"))
       (setq arg ""))
      ("ÂÆû‰æãËÆ≠ÁªÉ(ËæìÂÖ•->ËæìÂá∫)"
       (insert "ÂÆû‰æãËÆ≠ÁªÉ(ËæìÂÖ•->ËæìÂá∫): ")
       (save-excursion
         (call-interactively 'org-insert-subheading)
         (insert "ËæìÂá∫")
         (setq arg "")))
      ("ÁâπÁÇπÂíåÂéüÂõ†"
       (setq arg "‰∏ÄÈò∂ËÆ≠ÁªÉÔºöÂÆÉÁöÑÁâπÊÄßÂíåÂéüÂõ†"))
      ("Êúâ‰ªÄ‰πàÁî®"
       (setq arg "‰∏ÄÈò∂ËÆ≠ÁªÉÔºöÂÆÉÁöÑ‰ΩúÁî®"))
      ("ËØ¶ÁªÜËøáÁ®ã"       
       (setq arg "‰∏ÄÈò∂ËÆ≠ÁªÉÔºöËØ¶ÁªÜËØ¥Êòé(Ê†πÊçÆÊñ∞ÁöÑÁ≠ñÁï•ÊâßË°å)"))
      ("ÁªÑÊàêÈÉ®ÂàÜ(Ê¶ÇÂøµÂåñÔºåÂ∞ΩÈáè‰∏çÂ±ïÂºÄÔºåÊ≠£ÂêëÂíåÈÄÜÂêë)"       
       (setq arg "‰∫åÈò∂Áü•ËØÜÔºöÁªÑÊàê„ÄÅÊûÑÊàê"))
      ("Êèê‰æõ‰ªÄ‰πà(Ê¶ÇÂøµÂåñÔºåÂêë‰∏äÈìæ)"       
       (setq arg "‰∫åÈò∂ËÆ≠ÁªÉÔºöÂèÇ‰∏éÁªÑÊàê Êàñ ÂÖ≥ÈîÆÊ≠•È™§"))
      ("ÊãÜÂàÜÊ≠•È™§(Ê¶ÇÂøµÂåñÔºåÂ∞ΩÈáè‰∏çÂ±ïÂºÄÔºåÊ≠£ÂêëÂíåÈÄÜÂêë)"
       (setq arg "‰∫åÈò∂Áü•ËØÜÔºöÂÖ≥ÈîÆÊ≠•È™§")))

    (insert arg)))


(provide 'init-org)
;;; init-org.el ends here
